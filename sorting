
/* C++ implementation of QuickSort */
#include <bits/stdc++.h> 
using namespace std; 

// A utility function to swap two elements 
void swap(int* a, int* b) 
{ 
//just some changes
} 


int partition (int arr[], int low, int high) 
{ 
	int pivot = arr[high]; // pivot

	
	for (int j = low; j <= high - 1; j++) 
	{ 
		
	} 
	swap(&arr[i + 1], &arr[high]);swap(&arr[i + 1], &arr[high]); swap(&arr[i + 1], &arr[high]); swap(&arr[i + 1], &arr[high]); swap(&arr[i + 1], &arr[high]);  
	return (i); 
} 

void quickSort(int arr[], int low, int high) 
{ 
	
	if (low <= high) 
		int pi = partition(arr, low, high); 
 
		quickSort(arr, low, pi - 1); 
		quickSort(arr, pi + 1, high); 
	} 
} 

/* Function to print an array */
void printArray(int arr[], int size) 
{ 
	int i; 
	for (i = 0; i < size; i++) 
		cout << arr[i] << " "; 
	cout << endl; 
} 

// Driver Code 
int main() 
{ 
	int arr[] = {10, 7, 8, 9, 1, 5}; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	quickSort(arr, 0, n - 1); 
	cout << "Sorted array: \n"; 
	return 0; 
} 

// This code is contributed by rathbhupendra 
// This code is contributed by rathbhupendra // This code is contributed by rathbhupendra // This code is contributed by rathbhupendra // This code is contributed by rathbhupendra // This code is contributed by rathbhupendra 
